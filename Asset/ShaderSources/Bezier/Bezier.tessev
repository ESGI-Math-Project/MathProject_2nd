#version 450 core

#define ALPHA_MODE_OPAQUE 0
#define ALPHA_MODE_MASK 1
#define ALPHA_MODE_BLEND 2

#define MAX_LIGHT_COUNT 20
#define EPSILON 0.1

// Using 96 as it's "31*3" rounded up to be a multiple of 4.
#define NUM_CONTROL_POINTS_MAX 96

struct TextureInfo
{
    int Index;
    int TexCoord;
};

struct NormalTextureInfo
{
    int Index;
    int TexCoord;
    float Scale;
};

struct OcclusionTextureInfo
{
    int Index;
    int TexCoord;
    float Strenght;
};

struct MetallicRoughtness
{
    vec4 BaseColorFactor;
    TextureInfo BaseColorTexture;
    float MetallicFactor;
    float RoughtnessFactor;
    TextureInfo MetallicRoughnessTexture;
};

struct MaterialParams
{
    MetallicRoughtness PbrMetallicRoughness;
    NormalTextureInfo NormalTexture;
    OcclusionTextureInfo OcclusionTexture;
    TextureInfo EmissiveTexture;
    vec4 EmissiveFactor;
    int AlphaMode;
    float AlphaCutoff;
    int DoubleSided;
};

struct Light
{
    vec4 Color;
    vec4 Position;
    vec4 Direction;
    float Range;
    float Intensity;
    float Cutoff;
    int Type; //0 = Directional ; 1 = Point ; 2 = Spot
};

struct LightData
{
    Light lights[MAX_LIGHT_COUNT];
    int lightCount;
};

layout(std140, binding = 0) uniform Camera
{
    mat4 u_ViewProjectionMatrix;
    vec4 u_CameraPosition;
    vec4 u_CameraDirection;
};

layout(std140, binding = 1) uniform Model
{
    mat4 u_ModelMatrix;
    mat4 u_NormalMatrix;
    int u_EntityId;
};

layout(std140, binding = 2) uniform Lights
{
    LightData lights;
};

layout(std140, binding = 3) uniform MaterialParameters
{
    MaterialParams materialParameters;
};

layout(std140, binding = 4) uniform CurveParameters
{
    vec4 u_ControlPoints[NUM_CONTROL_POINTS_MAX];
    vec4 u_Weights[NUM_CONTROL_POINTS_MAX/4];
    int u_NumberOfSegment;
    int u_NumberControlPoint; // 4 by default.
    int u_Degree; // min should be 1
    int u_NumberOfKnot; // min should be 1
};
vec3 GetControlPoint(int i)
{
    i = min(i, NUM_CONTROL_POINTS_MAX);
    int index = int(gl_in[i/3].gl_Position[i%3]);
    return u_ControlPoints[index].xyz;
}

layout(isolines) in;


void main() {
    float u = gl_TessCoord.x;
    float t = u;


    vec3 tmp[NUM_CONTROL_POINTS_MAX];
    int count = min(NUM_CONTROL_POINTS_MAX, u_NumberControlPoint);

    for(int i = 0; i < count; i++)
    {
        tmp[i] = GetControlPoint(i);
    }

    // Application de l'algorithme de De Casteljau
    for (int j = 1; j < count; j++) {
        for (int i = 0; i < count - j; i++) {
            tmp[i] = (1.0 - t) * tmp[i] + t * tmp[i+1];
        }
    }

    // Le premier élément de tempPoints contient maintenant la position sur la courbe pour le t spécifique
    vec3 p = tmp[0];

    // Calcul de la position finale du point sur la courbe dans l'espace de la caméra
    gl_Position = u_ViewProjectionMatrix * vec4(p, 1.0);
}