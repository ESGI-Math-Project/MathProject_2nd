
#version 450 core

#define ALPHA_MODE_OPAQUE 0
#define ALPHA_MODE_MASK 1
#define ALPHA_MODE_BLEND 2

#define MAX_LIGHT_COUNT 20
#define EPSILON 0.1

#define NUM_CONTROL_POINTS_MAX 96

struct TextureInfo
{
    int Index;
    int TexCoord;
};

struct NormalTextureInfo
{
    int Index;
    int TexCoord;
    float Scale;
};

struct OcclusionTextureInfo
{
    int Index;
    int TexCoord;
    float Strenght;
};

struct MetallicRoughtness
{
    vec4 BaseColorFactor;
    TextureInfo BaseColorTexture;
    float MetallicFactor;
    float RoughtnessFactor;
    TextureInfo MetallicRoughnessTexture;
};

struct MaterialParams
{
    MetallicRoughtness PbrMetallicRoughness;
    NormalTextureInfo NormalTexture;
    OcclusionTextureInfo OcclusionTexture;
    TextureInfo EmissiveTexture;
    vec4 EmissiveFactor;
    int AlphaMode; // Opaque = 0, Mask = 1, Blend = 2,
    float AlphaCutoff;
    int DoubleSided;
};

struct Light
{
    vec4 Color;
    vec4 Position;
    vec4 Direction;
    float Range;
    float Intensity;
    float Cutoff;
    int Type; //0 = Directional ; 1 = Point ; 2 = Spot
};

struct LightData
{
    Light lights[MAX_LIGHT_COUNT];
//    Light lights;
    int lightCount;
};

layout(std140, binding = 0) uniform Camera
{
    mat4 u_ViewProjectionMatrix;
    vec4 u_CameraPosition;
    vec4 u_CameraDirection;
};

layout(std140, binding = 1) uniform Model
{
    mat4 u_ModelMatrix;
    mat4 u_NormalMatrix;
    int u_EntityId;
};

layout(std140, binding = 2) uniform Lights
{
    LightData lights;
};

layout(std140, binding = 3) uniform MaterialParameters
{
    MaterialParams materialParameters;
};

layout(std140, binding = 4) uniform CurveParameters
{
    vec4 u_ControlPoints[NUM_CONTROL_POINTS_MAX];
    vec4 u_Weights[NUM_CONTROL_POINTS_MAX/4];
    int u_NumberOfSegment;
    int u_NumberControlPoint; // 4 by default.
    int u_Degree; // min should be 1
};

float GetWeight(int i)
{
    int a = i/4;
    int b = i%4;
    return u_Weights[a][b];
}

vec3 GetControlPoint(int i)
{
    i = min(i, NUM_CONTROL_POINTS_MAX);
    int index = int(gl_in[i/4].gl_Position[i%4]);
    return u_ControlPoints[index].xyz;
}

float binomial(int n, int k) {
    float result = 1.0;
    for (int i = 1; i <= k; ++i) {
        result *= float(n - i + 1) / float(i);
    }
    return result;
}

float bernstein(int i, int n, float t) {
    return binomial(n, i) * pow(t, float(i)) * pow(1.0 - t, float(n - i));
}

vec3 BSpline(float t) {
    int n = numControlPoints - 1;
    vec3 result = vec3(0.0);
    
    for (int i = 0; i < numControlPoints; ++i) {
        float b = bernstein(i, n, t);
        result += controlPoints[i].position * b;
    }
    
    return result;
}

void main() {
    int numberOfLine =  u_NumberOfSegment%64;
    if(numberOfLine == 0) {
        numberOfLine = u_NumberOfSegment / 64;
    } else {
        numberOfLine = u_NumberOfSegment / 64 + 1;
    }
    int numberOfSegment = u_NumberOfSegment/numberOfLine;
    float pas = 1/numberOfLine;
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    float t = (1.0-v)*u + v*(u+pas); // Valeur de t variant de 0 Ã  1 pour le calcul de la position sur la courbe

	gl_Position = u_ViewProjectionMatrix * vec4(BSpline(t), 1.0);
}

