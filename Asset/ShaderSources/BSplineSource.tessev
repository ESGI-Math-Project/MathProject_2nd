
#version 450 core

#define ALPHA_MODE_OPAQUE 0
#define ALPHA_MODE_MASK 1
#define ALPHA_MODE_BLEND 2

#define MAX_LIGHT_COUNT 20
#define EPSILON 0.1

#define NUM_CONTROL_POINTS_MAX 96

struct TextureInfo
{
    int Index;
    int TexCoord;
};

struct NormalTextureInfo
{
    int Index;
    int TexCoord;
    float Scale;
};

struct OcclusionTextureInfo
{
    int Index;
    int TexCoord;
    float Strenght;
};

struct MetallicRoughtness
{
    vec4 BaseColorFactor;
    TextureInfo BaseColorTexture;
    float MetallicFactor;
    float RoughtnessFactor;
    TextureInfo MetallicRoughnessTexture;
};

struct MaterialParams
{
    MetallicRoughtness PbrMetallicRoughness;
    NormalTextureInfo NormalTexture;
    OcclusionTextureInfo OcclusionTexture;
    TextureInfo EmissiveTexture;
    vec4 EmissiveFactor;
    int AlphaMode; // Opaque = 0, Mask = 1, Blend = 2,
    float AlphaCutoff;
    int DoubleSided;
};

struct Light
{
    vec4 Color;
    vec4 Position;
    vec4 Direction;
    float Range;
    float Intensity;
    float Cutoff;
    int Type; //0 = Directional ; 1 = Point ; 2 = Spot
};

struct LightData
{
    Light lights[MAX_LIGHT_COUNT];
//    Light lights;
    int lightCount;
};

layout(std140, binding = 0) uniform Camera
{
    mat4 u_ViewProjectionMatrix;
    vec4 u_CameraPosition;
    vec4 u_CameraDirection;
};

layout(std140, binding = 1) uniform Model
{
    mat4 u_ModelMatrix;
    mat4 u_NormalMatrix;
    int u_EntityId;
};

layout(std140, binding = 2) uniform Lights
{
    LightData lights;
};

layout(std140, binding = 3) uniform MaterialParameters
{
    MaterialParams materialParameters;
};

layout(std140, binding = 4) uniform CurveParameters
{
    vec4 u_ControlPoints[NUM_CONTROL_POINTS_MAX];
    vec4 u_Weights[NUM_CONTROL_POINTS_MAX/4];
    int u_NumberOfSegment;
    int u_NumberControlPoint; // 4 by default.
    int u_Degree; // min should be 1
    int u_NumberOfKnot; // min should be 1
};

float GetWeight(int i)
{
    int a = i/4;
    int b = i%4;
    return u_Weights[a][b];
}

vec3 GetControlPoint(int i)
{
    return u_ControlPoints[i].xyz;
}

vec3 GetControlPoint(float i)
{
    int a = int(floor(i));
    int b = a+1;
    return mix(GetControlPoint(a), GetControlPoint(b), fract(i));
}

float GetWeights(int i)
{
    return u_Weights[i/4][i%4];
}

float GetWeights(float i)
{
    int a = int(floor(i));
    int b = a+1;
    return mix(GetWeights(a), GetWeights(b), fract(i));
}

float GetKnot(int i)
{
    return gl_in[i/3].gl_Position[i%3];
}

vec3 GetKnotPosition(int i)
{
    return GetControlPoint(GetKnot(i));
}

float GetKnotWeight(int i)
{
    return GetWeights(GetKnot(i));
}

vec3 deBoor(int segment, float t) {
    vec4 v[NUM_CONTROL_POINTS_MAX];

    int order = u_Degree + 1;
    
    // First level
    for (int i = 0; i < u_NumberControlPoint; i++) {
        v[i] = vec4(GetControlPoint(i) * GetWeight(i), GetWeight(i));
    }
    
    for(int level = 1; level <= order; level++) {
        for(int i = segment; i > segment + level - order; i--) {
            float numerator = t - GetKnot(i);
            float denominator = GetKnot(i - level + order) - GetKnot(i);
            float alpha = numerator / denominator;
            v[i] = alpha *  v[i] + (1-alpha) * v[i-1];
        }
    }

    return v[segment].xyz / v[segment].w;
}

layout(isolines) in;

void main() {
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    //TODO: remap t between desired interval (i.e. 0 & 0.5)
    //Remap t to the domain where the spline is defined

    // int segment = int(v * (u_NumberOfKnot - u_Degree*2));
    int segment = int(mix(u_Degree, u_NumberControlPoint, v));
    float t = mix(GetKnot(segment), GetKnot(segment + 1), u);

	gl_Position = u_ViewProjectionMatrix * vec4(deBoor(segment, t), 1.0);
}

