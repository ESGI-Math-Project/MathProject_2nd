#version 450 core

#define ALPHA_MODE_OPAQUE 0
#define ALPHA_MODE_MASK 1
#define ALPHA_MODE_BLEND 2

#define MAX_LIGHT_COUNT 20
#define EPSILON 0.1


// Using 48 as it's "16*3"
// The first 16 control points are for the initial u factor and the later 16 point are for the v factor.
#define NUM_CONTROL_POINTS_MAX 48

struct TextureInfo
{
    int Index;
    int TexCoord;
};

struct NormalTextureInfo
{
    int Index;
    int TexCoord;
    float Scale;
};

struct OcclusionTextureInfo
{
    int Index;
    int TexCoord;
    float Strenght;
};

struct MetallicRoughtness
{
    vec4 BaseColorFactor;
    TextureInfo BaseColorTexture;
    float MetallicFactor;
    float RoughtnessFactor;
    TextureInfo MetallicRoughnessTexture;
};

struct MaterialParams
{
    MetallicRoughtness PbrMetallicRoughness;
    NormalTextureInfo NormalTexture;
    OcclusionTextureInfo OcclusionTexture;
    TextureInfo EmissiveTexture;
    vec4 EmissiveFactor;
    int AlphaMode;
    float AlphaCutoff;
    int DoubleSided;
};

struct Light
{
    vec4 Color;
    vec4 Position;
    vec4 Direction;
    float Range;
    float Intensity;
    float Cutoff;
    int Type; //0 = Directional ; 1 = Point ; 2 = Spot
};

struct LightData
{
    Light lights[MAX_LIGHT_COUNT];
    int lightCount;
};

layout(std140, binding = 0) uniform Camera
{
    mat4 u_ViewProjectionMatrix;
    vec4 u_CameraPosition;
    vec4 u_CameraDirection;
};

layout(std140, binding = 1) uniform Model
{
    mat4 u_ModelMatrix;
    mat4 u_NormalMatrix;
    int u_EntityId;
};

layout(std140, binding = 2) uniform Lights
{
    LightData lights;
};

layout(std140, binding = 3) uniform MaterialParameters
{
    MaterialParams materialParameters;
};

layout(std140, binding = 4) uniform CurveParameters
{
    vec4 u_ControlPoints[NUM_CONTROL_POINTS_MAX];
    vec4 u_Weights[NUM_CONTROL_POINTS_MAX/4];
    int u_NumberOfSegment;
    int u_NumberControlPoint; // 4 by default.
    int u_Degree; // min should be 1
};

layout(quads) in;

layout (location = 0) out vec3 v_Position;
layout (location = 1) out vec3 v_Normal;
layout (location = 2) out vec2 v_TexCoord;
layout (location = 3) out vec4 v_Color;
layout (location = 4) out flat int v_EntityId;

void main() {
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    //TODO: remap t between desired interval (i.e. 0 & 0.5)
    //Remap t to the domain where the spline is defined

    // int segment = int(v * (u_NumberOfKnot - u_Degree*2));
    int segment = int(mix(u_Degree, u_NumberControlPoint, v));
    float t = mix(GetKnot(segment), GetKnot(segment + 1), u);

	gl_Position = u_ViewProjectionMatrix * vec4(deBoor(segment, t), 1.0);

    v_EntityId = u_EntityId;
}

